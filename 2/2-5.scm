(define (square x) (* x x))
(define (pow a b)
  (cond ((= b 0) 1)
        ((= (remainder b 2) 0) (square (pow a (/ b 2))))
        (else (* a (pow a (- b 1))))))
(define (cons a b)
  (lambda (m) (m a b)))
(define (car m)
  (m (lambda (p q) (pow 2 p))))
(define (cdr m)
  (m (lambda (p q) (pow 3 q))))
(define (output m)
  (* (car m) (cdr m)))
(display (output (cons 2 2)))
