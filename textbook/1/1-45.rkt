#lang sicp
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (if (= n 0)
      (lambda (x) x)
  (compose f (repeated f (- n 1)))))
(define (average a b)
  (/ (+ a b) 2))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (fixed-point f first-guess)
  (define tolerance 0.000001)
  (define (close-enough? v1 v2)
  (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (define next (f guess))
      (if (close-enough? guess next)
        next
        (try next)))
    (try first-guess))



(define (nth-root x pow-f-minus-one order)
  (fixed-point (repeated (average-damp (lambda (y) (/ x (pow-f-minus-one y)))) (if (= (remainder order 2) 1)
                                                                         (/ (- order 1) 2)
                                                                         (/ order 2)))
               1.0))
(nth-root 32 (lambda (x) (* x x x x)) 5)
